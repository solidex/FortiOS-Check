
- hosts: testing_clients

  gather_facts: no
  vars:
    ping_inconsistency: []
    wf_inconsistency: []
    av_inconsistency: []
    ips_inconsistency: []
  tasks:

  - fail:
      msg: "Error: group param is not defined"
    when: group is not defined

  - set_fact:
      service: "{{ services[group] }}"

  - name: "Pinging"
    shell: ping -q -c 5 -W 1 {{ item }}
    register: ping_status
    loop: "{{ service.ping }}"
    changed_when: no
    failed_when: no
    
  # Ping test
  - name: "Check if pings where ok"
    set_fact:
      ping_inconsistency: "{{ ping_inconsistency + [ inventory_hostname + ': packet loss pinging ' + item.item ]}}"
    when: '" 0% packet loss" not in item.stdout'
    loop: "{{ ping_status.results }}"

  # URL filter test
  - name: Check allowed web resources via HTTP request
    uri:
      url: "{{ item.url }}"
      return_content: yes
      validate_certs: no
    loop: "{{ service.wf }}"
    failed_when: no
    register: http_ping

  - debug: var=http_ping

  - name: "Check if URL filer works as expected"
    set_fact:
      wf_inconsistency: "{{ wf_inconsistency + [ inventory_hostname + ': result=<' + item.status | string + '> expected=<' + item.item.expected_status | string + '> for ' + item.item.url ]}}"
    when: 'item.status | int != item.item.expected_status | int'
    loop: "{{ http_ping.results }}"

  - name: "Check if redirect script is here"
    set_fact:
      wf_inconsistency: "{{ wf_inconsistency + [ inventory_hostname + ': expected=<' + item.item.expected_content | string + '> for ' + item.item.url ]}}"
    when:
      - item.item.expected_content is defined
      - item.item.expected_content | default("") not in item.content
    loop: "{{ http_ping.results }}"

  # AV test
  - name: Check if virus files can be downloaded
    uri:
      url: "{{ item.url }}"
      validate_certs: no
    loop: "{{ av_test_files }}"
    failed_when: no
    register: av_test

  - name: "Check if AV works as expected"
    set_fact:
      av_inconsistency: "{{ av_inconsistency + [ inventory_hostname + ': result=<' + item.status | string + '> expected=<' + service.av.expected_status | string + '> for ' + item.item.url ]}}"
    when: 'item.status | int != service.av.expected_status | int'
    loop: "{{ av_test.results }}"

  # IPS test
  - name: Check if IPS URLs can be received
    uri:
      url: "{{ item.url }}"
      validate_certs: no
      timeout: 5
    loop: "{{ ips_test_urls }}"
    failed_when: no
    register: ips_test

  - name: "Check if IPS works as expected"
    set_fact:
      ips_inconsistency: "{{ ips_inconsistency + [ inventory_hostname + ': result=<' + item.status | string + '> expected=<' + service.av.expected_status | string + '> for ' + item.item.url ]}}"
    when: 'item.status | int != service.ips.expected_status | int'
    loop: "{{ ips_test.results }}"

  # Printing results

  - name: Summarize results
    set_fact:
      inconsistency: "{{ ping_inconsistency + wf_inconsistency + av_inconsistency +  ips_inconsistency }}"

  - name: Analyze and print result
    debug:
       msg: "{{ 'Services ok' if (inconsistency | length) == 0 else inconsistency}}"
